# Jaeger Distributed Tracing Configuration for ZarishHealthcare System
# Comprehensive request tracing across humanitarian healthcare microservices

apiVersion: v1
kind: ConfigMap
metadata:
  name: jaeger-config
  namespace: zarish-monitoring
  labels:
    app: jaeger
    component: config
data:
  jaeger.yml: |
    # Jaeger Collector Configuration
    collector:
      zipkin:
        host-port: :9411
      otlp:
        grpc:
          host-port: :14250
        http:
          host-port: :14268
      
    # Storage Configuration
    storage:
      type: elasticsearch
      elasticsearch:
        server-urls: http://elasticsearch.zarish-monitoring.svc.cluster.local:9200
        index-prefix: jaeger
        create-index-templates: true
        version: 8
        max-doc-count: 10000000
        max-span-age: 168h  # 7 days
        num-shards: 5
        num-replicas: 1
        timeout: 30s
        bulk:
          size: 5000000  # 5MB
          workers: 10
          flush-interval: 1s
        tags-as-fields:
          all: true
          include: "service.name,service.version,deployment.environment,http.method,http.status_code,user.id,organization.id,facility.id,emergency.mode"
        
    # Query Configuration
    query:
      max-clock-skew-adjustment: 0s
      
    # Agent Configuration  
    agent:
      jaeger:
        tags: "deployment.environment=production,system=zarish-healthcare"

  sampling-strategies.json: |
    {
      "service_strategies": [
        {
          "service": "zarish-care",
          "type": "probabilistic",
          "param": 0.1,
          "max_traces_per_second": 100,
          "operation_strategies": [
            {
              "operation": "/api/v1/patients/critical",
              "type": "probabilistic",
              "param": 1.0
            },
            {
              "operation": "/api/v1/emergency/*",
              "type": "probabilistic", 
              "param": 1.0
            },
            {
              "operation": "/api/v1/patients/create",
              "type": "probabilistic",
              "param": 0.5
            }
          ]
        },
        {
          "service": "zarish-labs",
          "type": "probabilistic",
          "param": 0.1,
          "max_traces_per_second": 50,
          "operation_strategies": [
            {
              "operation": "/api/v1/results/critical",
              "type": "probabilistic",
              "param": 1.0
            },
            {
              "operation": "/api/v1/orders/urgent",
              "type": "probabilistic",
              "param": 0.8
            }
          ]
        },
        {
          "service": "zarish-ops",
          "type": "probabilistic",
          "param": 0.05,
          "max_traces_per_second": 25,
          "operation_strategies": [
            {
              "operation": "/api/v1/emergency/*",
              "type": "probabilistic",
              "param": 1.0
            },
            {
              "operation": "/api/v1/resources/shortage",
              "type": "probabilistic",
              "param": 1.0
            }
          ]
        },
        {
          "service": "zarish-analytics",
          "type": "probabilistic",
          "param": 0.02,
          "max_traces_per_second": 10,
          "operation_strategies": [
            {
              "operation": "/api/v1/dashboards/emergency",
              "type": "probabilistic",
              "param": 0.5
            },
            {
              "operation": "/api/v1/reports/outbreak",
              "type": "probabilistic",
              "param": 1.0
            }
          ]
        },
        {
          "service": "zarish-access",
          "type": "probabilistic",
          "param": 0.2,
          "max_traces_per_second": 200,
          "operation_strategies": [
            {
              "operation": "/auth/login",
              "type": "probabilistic",
              "param": 0.1
            },
            {
              "operation": "/auth/emergency-access",
              "type": "probabilistic",
              "param": 1.0
            },
            {
              "operation": "/api/v1/users/suspicious",
              "type": "probabilistic",
              "param": 1.0
            }
          ]
        },
        {
          "service": "zarish-sync",
          "type": "probabilistic",
          "param": 0.1,
          "max_traces_per_second": 30,
          "operation_strategies": [
            {
              "operation": "/api/v1/sync/emergency",
              "type": "probabilistic",
              "param": 1.0
            },
            {
              "operation": "/api/v1/conflicts/*",
              "type": "probabilistic",
              "param": 0.8
            }
          ]
        }
      ],
      "default_strategy": {
        "type": "probabilistic",
        "param": 0.001,
        "max_traces_per_second": 50
      },
      "per_service_strategies": [
        {
          "service": "kong-gateway",
          "type": "probabilistic",
          "param": 0.05
        },
        {
          "service": "istio-proxy",
          "type": "probabilistic",
          "param": 0.01
        }
      ]
    }

---
# Jaeger Collector Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger-collector
  namespace: zarish-monitoring
  labels:
    app: jaeger
    component: collector
spec:
  replicas: 2
  selector:
    matchLabels:
      app: jaeger
      component: collector
  template:
    metadata:
      labels:
        app: jaeger
        component: collector
    spec:
      serviceAccountName: jaeger
      containers:
        - name: jaeger-collector
          image: jaegertracing/jaeger-collector:1.48.0
          args:
            - --config-file=/conf/jaeger.yml
            - --sampling.strategies-file=/conf/sampling-strategies.json
          ports:
            - containerPort: 14268
              name: http-tchannel
              protocol: TCP
            - containerPort: 14250
              name: grpc
              protocol: TCP
            - containerPort: 9411
              name: zipkin
              protocol: TCP
            - containerPort: 14269
              name: admin
              protocol: TCP
          resources:
            requests:
              cpu: 200m
              memory: 512Mi
            limits:
              cpu: 1000m
              memory: 2Gi
          env:
            - name: SPAN_STORAGE_TYPE
              value: elasticsearch
            - name: ES_SERVER_URLS
              value: http://elasticsearch.zarish-monitoring.svc.cluster.local:9200
            - name: ES_INDEX_PREFIX
              value: jaeger
            - name: ES_TAGS_AS_FIELDS_ALL
              value: "true"
            - name: COLLECTOR_OTLP_ENABLED
              value: "true"
            - name: COLLECTOR_ZIPKIN_HOST_PORT
              value: ":9411"
            - name: COLLECTOR_NUM_WORKERS
              value: "100"
            - name: COLLECTOR_QUEUE_SIZE
              value: "2000"
          volumeMounts:
            - name: config-volume
              mountPath: /conf
              readOnly: true
          livenessProbe:
            httpGet:
              path: /
              port: 14269
            initialDelaySeconds: 30
            timeoutSeconds: 10
            periodSeconds: 15
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /
              port: 14269
            initialDelaySeconds: 10
            timeoutSeconds: 10
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
      volumes:
        - name: config-volume
          configMap:
            name: jaeger-config

---
# Jaeger Query Deployment  
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger-query
  namespace: zarish-monitoring
  labels:
    app: jaeger
    component: query
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jaeger
      component: query
  template:
    metadata:
      labels:
        app: jaeger
        component: query
    spec:
      serviceAccountName: jaeger
      containers:
        - name: jaeger-query
          image: jaegertracing/jaeger-query:1.48.0
          args:
            - --config-file=/conf/jaeger.yml
          ports:
            - containerPort: 16686
              name: http-query
              protocol: TCP
            - containerPort: 16687
              name: admin
              protocol: TCP
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 1Gi
          env:
            - name: SPAN_STORAGE_TYPE
              value: elasticsearch
            - name: ES_SERVER_URLS
              value: http://elasticsearch.zarish-monitoring.svc.cluster.local:9200
            - name: ES_INDEX_PREFIX
              value: jaeger
            - name: QUERY_BASE_PATH
              value: /jaeger
            - name: QUERY_UI_CONFIG
              value: /conf/ui.json
          volumeMounts:
            - name: config-volume
              mountPath: /conf
              readOnly: true
            - name: ui-config
              mountPath: /conf/ui.json
              subPath: ui.json
              readOnly: true
          livenessProbe:
            httpGet:
              path: /
              port: 16687
            initialDelaySeconds: 30
            timeoutSeconds: 10
            periodSeconds: 15
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /
              port: 16687
            initialDelaySeconds: 10
            timeoutSeconds: 10
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
      volumes:
        - name: config-volume
          configMap:
            name: jaeger-config
        - name: ui-config
          configMap:
            name: jaeger-ui-config

---
# Jaeger Agent DaemonSet
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: jaeger-agent
  namespace: zarish-monitoring
  labels:
    app: jaeger
    component: agent
spec:
  selector:
    matchLabels:
      app: jaeger
      component: agent
  template:
    metadata:
      labels:
        app: jaeger
        component: agent
    spec:
      serviceAccountName: jaeger
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
        - name: jaeger-agent
          image: jaegertracing/jaeger-agent:1.48.0
          args:
            - --config-file=/conf/jaeger.yml
            - --reporter.grpc.host-port=jaeger-collector.zarish-monitoring.svc.cluster.local:14250
          ports:
            - containerPort: 5775
              name: zk-compact-trft
              protocol: UDP
            - containerPort: 5778
              name: config-rest
              protocol: TCP
            - containerPort: 6831
              name: jg-compact-trft
              protocol: UDP
            - containerPort: 6832
              name: jg-binary-trft
              protocol: UDP
            - containerPort: 14271
              name: admin
              protocol: TCP
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 200m
              memory: 256Mi
          env:
            - name: REPORTER_GRPC_HOST_PORT
              value: jaeger-collector.zarish-monitoring.svc.cluster.local:14250
          volumeMounts:
            - name: config-volume
              mountPath: /conf
              readOnly: true
          livenessProbe:
            httpGet:
              path: /
              port: 14271
            initialDelaySeconds: 30
            timeoutSeconds: 10
            periodSeconds: 15
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /
              port: 14271
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
      volumes:
        - name: config-volume
          configMap:
            name: jaeger-config
      tolerations:
        - effect: NoSchedule
          operator: Exists
        - effect: NoExecute
          operator: Exists

---
# Jaeger Services
apiVersion: v1
kind: Service
metadata:
  name: jaeger-collector
  namespace: zarish-monitoring
  labels:
    app: jaeger
    component: collector
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '14269'
    prometheus.io/path: '/metrics'
spec:
  type: ClusterIP
  ports:
    - port: 14268
      targetPort: 14268
      protocol: TCP
      name: http-tchannel
    - port: 14250
      targetPort: 14250
      protocol: TCP
      name: grpc
    - port: 9411
      targetPort: 9411
      protocol: TCP
      name: zipkin
    - port: 14269
      targetPort: 14269
      protocol: TCP
      name: admin
  selector:
    app: jaeger
    component: collector

---
apiVersion: v1
kind: Service
metadata:
  name: jaeger-query
  namespace: zarish-monitoring
  labels:
    app: jaeger
    component: query
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '16687'
    prometheus.io/path: '/metrics'
spec:
  type: ClusterIP
  ports:
    - port: 16686
      targetPort: 16686
      protocol: TCP
      name: http-query
    - port: 16687
      targetPort: 16687
      protocol: TCP
      name: admin
  selector:
    app: jaeger
    component: query

---
apiVersion: v1
kind: Service
metadata:
  name: jaeger-agent
  namespace: zarish-monitoring
  labels:
    app: jaeger
    component: agent
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '14271'
    prometheus.io/path: '/metrics'
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 5775
      targetPort: 5775
      protocol: UDP
      name: zk-compact-trft
    - port: 5778
      targetPort: 5778
      protocol: TCP
      name: config-rest
    - port: 6831
      targetPort: 6831
      protocol: UDP
      name: jg-compact-trft
    - port: 6832
      targetPort: 6832
      protocol: UDP
      name: jg-binary-trft
    - port: 14271
      targetPort: 14271
      protocol: TCP
      name: admin
  selector:
    app: jaeger
    component: agent

---
# Jaeger UI Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: jaeger-ui-config
  namespace: zarish-monitoring
  labels:
    app: jaeger
    component: ui-config
data:
  ui.json: |
    {
      "menu": [
        {
          "label": "ZarishHealthcare Documentation",
          "url": "https://docs.zarish.org"
        },
        {
          "label": "Runbooks",
          "url": "https://docs.zarish.org/runbooks"
        },
        {
          "label": "Grafana Dashboards",
          "url": "https://grafana.zarish.humanitarian.health"
        }
      ],
      "linkPatterns": [
        {
          "type": "logs",
          "key": "logsLink",
          "url": "https://grafana.zarish.humanitarian.health/explore?orgId=1&left=%5B%22now-1h%22,%22now%22,%22Loki%22,%7B%22expr%22:%22%7Bnamespace%3D%5C%22zarish-healthcare%5C%22%7D%20%7C%3D%20%5C%22#{traceID}%5C%22%22%7D%5D",
          "text": "View logs for this trace"
        },
        {
          "type": "metrics",
          "key": "metricsLink", 
          "url": "https://grafana.zarish.humanitarian.health/explore?orgId=1&left=%5B%22now-1h%22,%22now%22,%22Prometheus%22,%7B%22expr%22:%22http_requests_total%7Bservice%3D%5C%22#{process.tags.service.name}%5C%22%7D%22%7D%5D",
          "text": "View metrics for this service"
        }
      ],
      "archiveEnabled": true,
      "tracking": {
        "gaID": "",
        "trackErrors": false
      },
      "criticalPath": {
        "enabled": true
      },
      "deepDependencies": {
        "menuEnabled": true
      },
      "qualityMetrics": {
        "menuEnabled": true
      }
    }

---
# Jaeger ServiceAccount and RBAC
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jaeger
  namespace: zarish-monitoring
  labels:
    app: jaeger

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: jaeger
  labels:
    app: jaeger
rules:
  - apiGroups: [""]
    resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
    verbs: ["get", "list", "watch"]
  - apiGroups: ["extensions"]
    resources:
      - ingresses
    verbs: ["get", "list", "watch"]
  - apiGroups: ["networking.k8s.io"]
    resources:
      - ingresses
    verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: jaeger
  labels:
    app: jaeger
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: jaeger
subjects:
  - kind: ServiceAccount
    name: jaeger
    namespace: zarish-monitoring